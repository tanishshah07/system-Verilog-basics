
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a>`ifndef TOP_SV
<a name="2"><q-n>     2  </q-n></a>`<q-a>define</q-w> TOP_SV
<a name="3"><q-n>     3  </q-n></a>
<a name="4"><q-n>     4  </q-n></a><q-m>//`include "mem_def.sv"</q-m>
<a name="5"><q-n>     5  </q-n></a><q-m>//`include "ram_16x8.sv"</q-m>
<a name="6"><q-n>     6  </q-n></a><q-m>//`include "mem_inter.sv"</q-m>
<a name="7"><q-n>     7  </q-n></a><q-m>//`include "mem_pkg.sv"</q-m>
<a name="8"><q-n>     8  </q-n></a><q-w>module</q-w> mem_top();
<a name="9"><q-n>     9  </q-n></a><q-w>import</q-w> pkg::*;
<a name="10"><q-n>     10  </q-n></a><q-w>bit</q-w> clk,rst;
<a name="11"><q-n>     11  </q-n></a>
<a name="12"><q-n>     12  </q-n></a>mem_intf intf(clk,rst);
<a name="13"><q-n>     13  </q-n></a>mem_test test;
<a name="14"><q-n>     14  </q-n></a>
<a name="15"><q-n>     15  </q-n></a>ram dut(.clk(clk),
<a name="16"><q-n>     16  </q-n></a>        .rst(rst),
<a name="17"><q-n>     17  </q-n></a>	.wr_enb(intf.wr_enb),
<a name="18"><q-n>     18  </q-n></a>	.rd_enb(intf.rd_enb),
<a name="19"><q-n>     19  </q-n></a>	.wr_addr(intf.wr_addr),
<a name="20"><q-n>     20  </q-n></a>	.rd_addr(intf.rd_addr),
<a name="21"><q-n>     21  </q-n></a>	.rd_data(intf.rd_data),
<a name="22"><q-n>     22  </q-n></a>	.wr_data(intf.wr_data)
<a name="23"><q-n>     23  </q-n></a>      );
<a name="24"><q-n>     24  </q-n></a>
<a name="25"><q-n>     25  </q-n></a><q-w>initial</q-w> <q-w>begin</q-w>
<a name="26"><q-n>     26  </q-n></a> <q-w>forever</q-w> <q-w>begin</q-w>
<a name="27"><q-n>     27  </q-n></a>  #5 clk=~clk;
<a name="28"><q-n>     28  </q-n></a> <q-w>end</q-w>
<a name="29"><q-n>     29  </q-n></a><q-w>end</q-w>
<a name="30"><q-n>     30  </q-n></a>
<a name="31"><q-n>     31  </q-n></a><q-w>initial</q-w> <q-w>begin</q-w>
<a name="32"><q-n>     32  </q-n></a><q-w>fork</q-w>
<a name="33"><q-n>     33  </q-n></a> reset();
<a name="34"><q-n>     34  </q-n></a> run_test();
<a name="35"><q-n>     35  </q-n></a> <q-w>join</q-w>
<a name="36"><q-n>     36  </q-n></a> <q-m>//$display("tu top hai");</q-m>
<a name="37"><q-n>     37  </q-n></a><q-w>end</q-w>
<a name="38"><q-n>     38  </q-n></a>
<a name="39"><q-n>     39  </q-n></a>
<a name="40"><q-n>     40  </q-n></a><q-w>initial</q-w> <q-w>begin</q-w>
<a name="41"><q-n>     41  </q-n></a> <q-m>//#23;</q-m>
<a name="42"><q-n>     42  </q-n></a> <q-w>forever</q-w> <q-w>begin</q-w>
<a name="43"><q-n>     43  </q-n></a>   @(reset_on);
<a name="44"><q-n>     44  </q-n></a>   $display(<q-l>"reset task called @%t"</q-l>,$<q-w>time</q-w>);
<a name="45"><q-n>     45  </q-n></a>   reset();
<a name="46"><q-n>     46  </q-n></a> <q-w>end</q-w>
<a name="47"><q-n>     47  </q-n></a><q-w>end</q-w>
<a name="48"><q-n>     48  </q-n></a>
<a name="49"><q-n>     49  </q-n></a><q-w>task</q-w> reset();
<a name="50"><q-n>     50  </q-n></a><q-m>// @(negedge clk); // delay the reset </q-m>
<a name="51"><q-n>     51  </q-n></a>  rst=1'b1;
<a name="52"><q-n>     52  </q-n></a>  <q-w>repeat</q-w> (1) @(<q-a>negedge</q-w> clk);
<a name="53"><q-n>     53  </q-n></a>  rst=1'b0;
<a name="54"><q-n>     54  </q-n></a><q-w>endtask</q-w>
<a name="55"><q-n>     55  </q-n></a>
<a name="56"><q-n>     56  </q-n></a><q-w>task</q-w> run_test();
<a name="57"><q-n>     57  </q-n></a><q-m>//fork</q-m>
<a name="58"><q-n>     58  </q-n></a><q-w>begin</q-w>
<a name="59"><q-n>     59  </q-n></a> test=<q-w>new</q-w>();
<a name="60"><q-n>     60  </q-n></a> test.build();
<a name="61"><q-n>     61  </q-n></a> test.connect(intf);
<a name="62"><q-n>     62  </q-n></a> test.run_phase();
<a name="63"><q-n>     63  </q-n></a> #20;
<a name="64"><q-n>     64  </q-n></a> <q-m>//if(obj_cnt==0) </q-m>
<a name="65"><q-n>     65  </q-n></a> $finish;
<a name="66"><q-n>     66  </q-n></a> <q-w>end</q-w>
<a name="67"><q-n>     67  </q-n></a><q-m>//begin</q-m>
<a name="68"><q-n>     68  </q-n></a> <q-m>//#1ms;</q-m>
<a name="69"><q-n>     69  </q-n></a><q-m>//end</q-m>
<a name="70"><q-n>     70  </q-n></a> <q-m>//join_any</q-m>
<a name="71"><q-n>     71  </q-n></a><q-m>//disable fork;</q-m>
<a name="72"><q-n>     72  </q-n></a><q-m>//$finish;</q-m>
<a name="73"><q-n>     73  </q-n></a><q-w>endtask</q-w>
<a name="74"><q-n>     74  </q-n></a>
<a name="75"><q-n>     75  </q-n></a><q-w>endmodule</q-w>
<a name="76"><q-n>     76  </q-n></a>
<a name="77"><q-n>     77  </q-n></a>`<q-a>endif</q-w>
</pre>
</tt>

  
</body>
</html>
